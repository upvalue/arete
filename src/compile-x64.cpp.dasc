// compile-x64.cpp.dasc - Compile bytecode to native amd64 code
// This is a DynASM file. Must be run through DynASM to produce a C++ file

// TODO: Garbage collection
// We need a way of inspecting variables with garbage collector

// We have full control over the stack frame, so what this means is (1) making sure variables 
// are in a predictable location at any point that could cause GC and (2) figuring out how to
// inspect those stack frames from the GC. We can make a C++ struct like Frame (no need to use
// pointers-to-pointers here, it can be a simple array) and do a linked-list on the stack like Frame

// TODO: Exception throwing
// We need a way of handling exceptions and passing them on

// TODO: A no-store variant of VM instructions. Specifically APPLY and TAIL_APPLY. Might avoid
// generating unnecessary stuff.

// We also may need to deal with exceptions. Although we don't use them, we want to handle
// user code correctly

// TODO: Unclear on what the ideal way to call C++ functions is. There does not appear to be a 
// trivial way to call methods on the arete::State instance

// TODO: Cannot return a Value on Windows

// Anatomy of a natively-compiled Scheme function

// Registers:
// r12 = pointer to arete::State*
// r13 = stack index

// Stack:
// 0-8 = pointer to previous native stack frame (if any)
// 8-16 = count of gc'd values
// 16-a = local variables
// a-b = stack variales
// b-c = upvalues

// TODO: Use offsetof and other stuff instead of calling functions to retrieve information
// about a particular State

// TODO Figure out how to print a string

#include "arete.hpp"

#include "dasm_proto.h"
#include "dasm_x86.h"

#define AR_LOG_JIT(msg) ARETE_LOG((ARETE_LOG_TAG_JIT), "jit", msg)

namespace arete {

static size_t invocation = 0;
ptrdiff_t print_int(State& state, ptrdiff_t i) {
  std::cout << "print_int(" << invocation++ << "):" << i << std::endl;
  return 0;
}

void print_int_simple(ptrdiff_t i) {
  std::cout << "print_int_simple(" << invocation++ << "):" << i << std::endl;
}

void print_2int_simple(ptrdiff_t a, ptrdiff_t b) {
  std::cout << "print_2int:" << a << ' ' << b << std::endl;
}

void print_something() {
  std::cout << "something" << std::endl;
}

Value state_make_pair(State* state) {
  Value pare(state->make_pair(C_FALSE, C_FALSE));
  std::cout << "state_make_pair returning " << (size_t) pare.bits << std::endl;
  return pare;
}

Value state_collect(State* state) {
  std::cout << "COLLECTION BEGINNING" << std::endl;
  state->gc.collect();

  std::cout << "COLLECTION RETURNING" << std::endl;
  return C_UNSPECIFIED;
}

void state_push_native_gc_frame(State* state, NativeFrame* frame) {
	void* thing;
	std::cout << (ptrdiff_t) &thing << std::endl;

  //std::cout << "ptr to current_state " << (ptrdiff_t) current_state << std::endl;
  std::cout << "ptr to state " << (ptrdiff_t) state << std::endl;
  std::cout << "ptr to native frame " << (ptrdiff_t) frame << std::endl;
  std::cout << "native frame value_count " << (ptrdiff_t) frame->value_count << std::endl;
  std::cout << "ptr to previous native frame " << (ptrdiff_t) frame->previous << std::endl;
  state->gc.native_frames = frame;

  //return C_UNSPECIFIED;
}

ptrdiff_t return_int(ptrdiff_t a) {
	// TODO: Returning a Value from a function causes issues on windows
	return a;
}

void state_pop_native_gc_frame(State* state) {
	std::cout << "popping gc frame " << (ptrdiff_t) state->gc.native_frames << std::endl;
  state->gc.native_frames = state->gc.native_frames->previous;
}

ptrdiff_t state_gc_frame(State* state) {
  std::cout << "state_gc_frame" << (ptrdiff_t) state->gc.native_frames << std::endl;

  return (ptrdiff_t)state->gc.native_frames;

};

// callee-save

// parameters = rdi, rsi, rdx, rcx, r8, r9, xmm0-7
// rsp = stack pointer
// saved = rbx, rbp, rdi, rsi, rsp, r12-15
// rsp-128 is the red zone; can be used for temp values but destroyed by any called function

Value vmfunction_to_native(State& state, size_t argc, Value* argv) {
  const char* fn_name = "vmfunction->native";
  AR_FN_EXPECT_TYPE(state, argv, 0, VMFUNCTION);
  Value bv, nfn, vfn;

  vfn = argv[0];

  AR_LOG_JIT("vmfunction_to_native called");

  VMFunction* vmf = vfn.as_unsafe<VMFunction>();

  unsigned local_count = vmf->local_count;
  unsigned stack_max = vmf->stack_max;

  // Using the otherwise not-used-in-this codebase kBlah style to denote things that will become
  // constants in the compiled code

  unsigned total_stack = local_count+stack_max;
  unsigned kFrameSize = local_count+stack_max;
  // TODO: Align to 16 bits
  unsigned kTotalStackSize = sizeof(NativeFrame) - sizeof(void*) + ((total_stack) * sizeof(void*));
  size_t kValueSize = sizeof(void*);
  unsigned kCompStackOffset = kTotalStackSize - (kValueSize * stack_max);
  unsigned kTotalStackSizeAligned = kTotalStackSize;

  if((kTotalStackSize % 16) == 0) {
    kTotalStackSizeAligned += 8;
  }

  AR_ASSERT((kTotalStackSizeAligned + 56) % 16 == 0);

  AR_LOG_JIT("function frame info. kTotalStackSize " << kTotalStackSize << \
    " kTotalStackSizeAligned " << kTotalStackSizeAligned << " kCompStackOffset " << kCompStackOffset);

  // A note on a possible source of confusion: in the virtual machine, the stack is a separately
  // allocated data structure from locals and upvalues. Thus there's the computation stack which
  // exists only metaphorically here and is where the values of temporary computation are stored and
  // tracked by the garbage collector, and the actual stack i.e. rsp.

  | .arch x64
  |.section code

  |.define rState, r12
  |.define rStackI, r13
	|.if WINDOWS
	| .define rArg1, rcx
	| .define rArg2, rdx
	|.else
  | .define rArg1, rdi
  | .define rArg2, rsi
	|.endif
  |.type state, State, rState

  |.macro stateCallBegin, method
  //| mov rbp, rsp
  | push rbp
	| push rsp
  | mov rArg1, rState
  | mov64 rax, (ptrdiff_t) method
  |.endmacro

  |.macro stateCall
  | call rax
  |.endmacro

  |.macro stateCallEnd 
	| pop rsp
  | pop rbp
  //| mov rsp, rbp
  |.endmacro

  |.macro stateCallSimple, method
  | stateCallBegin method; stateCall; stateCallEnd
  |.endmacro

  // takes rStackI and sets STORE to the rsp offset it needs
  |.macro getCompStackIndex, store
  | mov store, rStackI
  | imul store, kValueSize
  | add store, kCompStackOffset
  | add store, rsp
  //| mov rArg2, rsp
  //| stateCallSimple print_int
  //| stateCallSimple print_int
  |.endmacro

  |.macro getCompStackTopValue, store
  | getCompStackIndex store
  | mov store, [store]
  |.endmacro

  |.macro getCompStackIndexAt, i, store
  | mov store, i
  | imul store, kValueSize
  | add store, kCompStackOffset
  | add store, rsp
  |.endmacro

  dasm_State *d;
  dasm_init(&d, DASM_MAXSECTION);

  |.actionlist actions
  |.globals globals
  |.globalnames globalnames

  void* globals[globals_MAX == 0 ? 1 : globals_MAX];
  (void) globalnames; // suppress compiler warning

  dasm_setupglobal(&d, globals, globals_MAX);
  dasm_setup(&d, actions);

  dasm_State** Dst = &d;

  |.code

  // Prologue
  // Save registers
	| push rbp
  | mov rbp, rsp
  | push rbx
  | push rState
  | mov rState, rArg1
  | push rArg1
  | push rArg2
  | push rStackI
  | push r15

  // NOTE: At the boundary of any CALL, stack size must be a multiple of 16!
  // PUSHing grows it by only 8.

  // Currently we push 7 * 8 = 56 at the start
  // This means that 56 + kTotalStackSizeAligned must be a multiple of 16 somehow

  | mov rStackI, 0

  // Allocate stack space
  | sub rsp, kTotalStackSizeAligned

  // NativeFrame::previous
  | mov qword [rsp+0], 0
  // NativeFrame::value_count
  | mov qword [rsp+8], kFrameSize

  // Zero out GC frame
  // Assumes function has a stack size of at least one.

  // rArg2 = loop limit, kFrameSize + rsp
  | mov rArg2, rsp
  | add rArg2, ((kFrameSize*8)+8)

  // Set RAX to NativeFrame::value_count
  | mov rArg1, rsp
  | add rArg1, 8

  |->gc_zero:
  // Now add 8 to rax at top of loop so it points at NativeFrame::values[0]
  | add rArg1, 8
  // Set value to zero
  | mov qword [rArg1], 0
  | cmp rArg1, rArg2
  | jne ->gc_zero
  //| mov qword [rsp+16], 0

  // Initialize locals

  | mov rArg2, rsp
  | stateCallSimple state_push_native_gc_frame

  //| mov rArg2, r14
  //| stateCallSimple print_int
  //| mov rArg2, r14

  // stack use grows from 64 to 72
  | mov rArg2, rbp
  | sub rArg2, rsp

  | stateCallSimple print_int

  | push rbp; mov rbp, rsp; 
  | mov rArg1, rState
  | mov64 rax, (ptrdiff_t) state_collect
  | call rax
  | pop rbp;

  // Execute function body
  size_t code_offset = 0;
  size_t *code = vmf->code_pointer();
  bool done = false;

  while(!done) {
    switch(code[code_offset++]) {
      case OP_PUSH_IMMEDIATE: {
        size_t value = code[code_offset++];
        AR_LOG_JIT("push-immediate " << Value(value) << " (" << (ptrdiff_t) value << ")");
        // Retrieve location of stack value
        | getCompStackIndex rArg1
        // Set value
        | mov qword [rArg1], (size_t) value
        // Increment stack
        | add rStackI, 1
        break;
      }

      case OP_FX_ADD: {

        return state.eval_error("fx-add not implemented");
      }

      case OP_RETURN:
      case OP_RETURN_END: {
        AR_LOG_JIT("return");
        //| getCompStackTop rax
        //| mov rArg2, [rsp+16]
        //| mov rArg2, rax
        //| stateCallSimple print_int
        //| sub rStackI, 1

        | sub rStackI, 1
        | getCompStackIndex rArg1
        | mov rStackI, [rArg1]
        | jmp ->unwind

        if(code[code_offset-1] == OP_RETURN_END)
          done = true;

        break;
      }

      default: {
        return state.eval_error("unknown bytecode");
      }
    }
  }
  done:

  | stateCallSimple state_pop_native_gc_frame

  |->unwind:
  // Free stack space
  | add rsp, kTotalStackSizeAligned

  // Retrieve return value from rStackI
  | mov rax, rStackI
  // Restore registers
  | pop r15
  | pop rStackI
  | pop rArg2
  | pop rArg1
	| pop rState
  | pop rbx
  | mov rsp, rbp
	| pop rbp

  // Create return value

/*
  | push rbp
  | push rState
  | mov rState, rArg1
  | stateCallSimple state_collect
  | mov rax, 0
  | pop rState
  | pop rbp
  */
  // Return

  // i don't understand why RAX has to be saved, when it is immediately overwritten.
  /*
  | push rbp; mov rbp, rsp; push rbx; push rax
  //| sub rsp, 8
  | mov64 rax, (ptrdiff_t) state_collect
  | call rax
  | leave
  */


  //| add rsp, 8

  | ret

  size_t size;

  dasm_link(&d, &size);

  AR_FRAME(state, bv, nfn);

  bv = state.make_bytevector<unsigned char>(size);

  dasm_encode(&d, bv.bv_data());

  dasm_free(&d);

  AR_LOG_JIT("vmfunction->native done; calling function");

  ptrdiff_t (*ptr)(State*, size_t) = (ptrdiff_t (*)(State*, size_t)) bv.bv_data();

  ptrdiff_t result = ptr(&state, 555);

  std::cout << "result: " << Value(result) << std::endl;

  return C_UNSPECIFIED;
}

AR_DEFUN("vmfunction->native", vmfunction_to_native, 1);

}
