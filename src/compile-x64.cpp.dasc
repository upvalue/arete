// compile-x64.cpp.dasc - Compile bytecode to native amd64 code
// This is a DynASM file. Must be run through DynASM to produce a C++ file

// TODO: Garbage collection
// We need a way of inspecting variables with garbage collector

// We have full control over the stack frame, so what this means is (1) making sure variables 
// are in a predictable location at any point that could cause GC and (2) figuring out how to
// inspect those stack frames from the GC. We can make a C++ struct like Frame (no need to use
// pointers-to-pointers here, it can be a simple array) and do a linked-list on the stack like Frame

// TODO: Exception throwing
// We need a way of handling exceptions and passing them on

// TODO: Unclear on what the ideal way to call C++ functions is. There does not appear to be a 
// trivial way to call methods on the arete::State instance

// Anatomy of a natively-compiled Scheme function

// Registers:
// r12 = pointer to arete::State*

#include "arete.hpp"

#include "dasm_proto.h"
#include "dasm_x86.h"

#define AR_LOG_JIT(msg) ARETE_LOG((ARETE_LOG_TAG_JIT), "jit", msg)

namespace arete {

ptrdiff_t print_int(State& state, ptrdiff_t i) {
  std::cout << "print_int:" << i << std::endl;
  return 0;
}

void print_int_simple(ptrdiff_t i) {
  std::cout << "print_int:" << i << std::endl;
}

void print_something() {
  std::cout << "something" << std::endl;
}

Value state_make_pair(State* state) {
  Value pare(state->make_pair(C_FALSE, C_FALSE));
  std::cout << "state_make_pair returning " << (size_t) pare.bits << std::endl;
  return pare;
}

Value state_collect(State* state) {
  std::cout << "COLLECTION BEGINNING" << std::endl;
  state->gc.collect();

  std::cout << "COLLECTION RETURNING" << std::endl;
  return C_UNSPECIFIED;
}

Value state_push_native_gc_frame(State* state, NativeFrame* frame) {

  std::cout << "ptr to native frame" << (ptrdiff_t) frame << std::endl;
  std::cout << "ptr to previous native frame" << (ptrdiff_t) frame->previous << std::endl;
  state->gc.native_frames = frame;

  return C_UNSPECIFIED;
}

Value state_pop_native_gc_frame(State* state) {
  state->gc.native_frames = state->gc.native_frames->previous;
  return C_UNSPECIFIED;

}

ptrdiff_t state_gc_frame(State* state) {
  std::cout << "state_gc_frame" << (ptrdiff_t) state->gc.native_frames << std::endl;

  return (ptrdiff_t)state->gc.native_frames;

};

// callee-save

// parameters = rdi, rsi, rdx, rcx, r8, r9, xmm0-7
// rsp = stack pointer
// saved = rbx, rbp, rdi, rsi, rsp, r12-15
// rsp-128 is the red zone; can be used for temp values but destroyed by any called function

Value vmfunction_to_native(State& state, size_t argc, Value* argv) {
  const char* fn_name = "vmfunction->native";
  AR_FN_EXPECT_TYPE(state, argv, 0, VMFUNCTION);
  Value bv, nfn, vfn;

  vfn = argv[0];

  AR_LOG_JIT("vmfunction_to_native called");

  VMFunction* vmf = vfn.as_unsafe<VMFunction>();

  unsigned local_count = vmf->local_count;
  unsigned stack_max = vmf->stack_max;

  // Using the otherwise not-used-in-this codebase kBlah style to denote things that will become
  // constants in the compiled code

  unsigned total_stack = local_count+stack_max;
  unsigned kTotalStackSize = sizeof(NativeFrame) - sizeof(void*) + ((total_stack) * sizeof(void*));

  // A note on some confusion: in the virtual machine, the stack is a separately allocated data
  // structure from locals and upvalues. Thus here there's the VM stack which exists only
  // metaphorically here and is where the values of temporary computation are stored and tracked by
  // the garbage collector, and the actual stack i.e. rsp.

  AR_LOG_JIT("function with stack size " << kTotalStackSize);
  
  | .arch x64
  |.section code

  |.define rState, r12
  |.define rArg1, rdi
  |.define rArg2, rsi
  |.type state, State, rState

  |.macro stateCallBegin, method
  | mov rbp, rsp
  | mov rArg1, rState
  | mov64 rax, (ptrdiff_t) method
  |.endmacro

  |.macro stateCall
  | call rax
  |.endmacro

  |.macro stateCallEnd 
  | mov rsp, rbp
  |.endmacro

  |.macro stateCallSimple, method
  | stateCallBegin method; stateCall; stateCallEnd
  |.endmacro

  dasm_State *d;
  dasm_init(&d, DASM_MAXSECTION);

  |.actionlist actions
  |.globals globals
  |.globalnames globalnames

  void* globals[globals_MAX];
  (void) globalnames; // suppress compiler warning

  dasm_setupglobal(&d, globals, globals_MAX);
  dasm_setup(&d, actions);

  dasm_State** Dst = &d;

  |.code

  // Prologue
  // Save registers
  | push rbx
  | push rState
  | mov rState, rArg1
  | push rArg1
  | push rArg2

  | mov rArg1, 420
  | mov64 rax, (ptrdiff_t) print_int_simple
  | call rax


  // Allocate stack space
  //| sub rsp, 24

  // NativeFrame::previous
  | mov qword [rsp+0], 0
  // NativeFrame::value_count
  | mov qword [rsp+8], 0

  // push GC root
  | mov rArg2, rsp
  | stateCallSimple state_push_native_gc_frame


  //| mov rax, 5
  //| mov rArg2, rsp
  //| stateCallSimple state_push_native_gc_frame
  //| mov [rsp+0], rax

  | stateCallSimple state_pop_native_gc_frame

  

  // Free stack space
  //| add rsp, 24

  // Restore registers
  | pop rArg2
  | pop rArg1
  | pop rState
  | pop rbx

  // Create return value

  | mov rax, 0
  // Return
  | ret

  size_t size;

  dasm_link(&d, &size);

  AR_FRAME(state, bv, nfn);

  bv = state.make_bytevector<unsigned char>(size);

  dasm_encode(&d, bv.bv_data());

  dasm_free(&d);

  AR_LOG_JIT("vmfunction->native done; calling function");

  ptrdiff_t (*ptr)(State*, size_t) = (ptrdiff_t (*)(State*, size_t)) bv.bv_data();

  ptrdiff_t result = ptr(&state, 123);

  //std::cout << "result: " << result << std::endl;

  return C_UNSPECIFIED;
}

AR_DEFUN("vmfunction->native", vmfunction_to_native, 1);

}