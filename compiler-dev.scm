(load "scheme/syntax.scm")
(load "scheme/compiler.scm")

;; It would be possible to print quite good errors given enough info
;; For example --
;; (fx+ 2 "asdf")
;;        ^^^^^^
;; Expected fixnum but got string
;; How would we accomplish this?
;; We could print source information for each argument to a function

;; When an exception is generated by an APPLY, this could be passed via some kind of special
;; information, right?

;; We'd need the source information of where the arguments were generated...

(define (main)
  (define fn (OpenFn/make 'vm-toplevel))

  (OpenFn/toplevel?! fn #t)

  (define file-body (slurp-file "examples/fib.scm"))

  (define fn-body
    (map (lambda (x) (expand x #f)) file-body))

  ;(print fn-body)
  (compile fn fn-body)
  (compile-finish fn)

  (define compiled-proc (OpenFn->procedure fn))
  (set-vmfunction-log! compiled-proc #t)
  (print (compiled-proc))
  ;(print (expand '(define (hello) #t) #f))
)

(set-top-level-value! 'COMPILER-LOG #t)

(main)
